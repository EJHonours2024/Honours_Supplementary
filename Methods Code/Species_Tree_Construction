#######################
##### OrthoFinder #####
#######################

## Run OrthoFinder to identify single copy orthologs. 

$HOME/tools/OrthoFinder_v2.5.2/orthofinder -t 72 -M msa -S diamond_ultra_sens -I 1.3 -f /home/emma_phylotrans/

## Copy the multiple sequence alignment of the single copy orthologs into a new file. 

mkdir IQTREE_ortho_MSA
parallel --eta "cp ../MultipleSequenceAlignments/{}.fa IQTREE_ortho_MSA" :::: Orthogroups_for_concatenated_alignment.txt 

## Remove species duplicates and write to new file with suffix .noduplicates.fa  

for f in *.fa
do
variable=$(basename "$f" | sed 's/.fa//g')
echo $variable
sed 's/_/\t/g' $variable".fa" | awk '{print $1}' | perl -pe '$. > 1 and /^>/ ? print "\n" : chomp' > $variable".linear0.fa" ##Linearize fasta first
awk 'BEGIN{RS=">"}NR>1{sub("\n","\t"); gsub("\n",""); print RS$0}' $variable".linear0.fa" | awk '{freq[$1]++} END{for (i in freq) print freq[i]"\t"i}' | awk 'NF>1' | awk '$1<=1' | awk '{print $2}' > uniq.txt ##Convert fasta to tab, then count frequency of fasta header. Write to file only non-duplicates (i.e. freq occur one time only)
grep --no-group-separator -A1 -F -f uniq.txt $variable".linear0.fa" > $variable".noduplicate.fa" ##Use grep to retain only non-duplicates
rm -rf $variable".fa"
rm -rf $variable".linear0.fa"
rm -rf uniq.txt
done

## Confirm that duplicates have been removed by random check of multiple files. 

## Construction of species tree w/ IQTREE

$HOME/tools/iqtree-2.0.6-Linux/bin/iqtree2 -p "IQTREE_ortho_MSA" -cmax 15 -msub nuclear -m MFP+Merge -alrt 1000 -B 1000 -nt AUTO --prefix "species_tree"

## Infer gene/loci trees w/ IQTREE (include bootstrap command)

$HOME/tools/iqtree-2.0.6-Linux/bin/iqtree2 -S "IQTREE_ortho_MSA" -B 1000 --prefix loci_boot -T AUTO

## Estimation of gCF and sCF w/ IQTREE

$HOME/tools/iqtree-2.0.6-Linux/bin/iqtree2 -t species_tree.treefile --gcf loci.treefile -p "IQTREE_ortho_MSA" --scf 100 --prefix concord -T 10

## Visual assessment of the relationship between bootstrap values and gCF and sCF values (in R). 

df <- read_excel("gcf_scf_input.xlsx")
print(df)

names(df)[18] = "bootstrap" ## Annotate columns as "bootstrap" and "branchlength" - column numbers will change based on dataframe size. 
names(df)[19] = "branchlength"

head(df)

ggplot(d, aes(x = gCF, y = sCF)) + 
    geom_point(aes(colour = bootstrap)) + 
    scale_colour_viridis(direction = -1) + 
    xlim(0, 100) +
    ylim(0, 100) +
    geom_abline(slope = 1, intercept = 0, linetype = "dashed") +
  theme_bw() ## Producing graph 

## ASTRAL coalescent tree construction

## Contracting branches below specified bootstrap support values using IQTREE gene/loci trees. 

nw_ed loci_boot.treefile 'i & b<=75' o > loci_boot_BS75.treefile
nw_ed loci_boot.treefile 'i & b<=50' o > loci_boot_BS50.treefile
nw_ed loci_boot.treefile 'i & b<=33' o > loci_boot_BS33.treefile
nw_ed loci_boot.treefile 'i & b<=30' o > loci_boot_BS30.treefile
nw_ed loci_boot.treefile 'i & b<=25' o > loci_boot_BS25.treefile
nw_ed loci_boot.treefile 'i & b<=20' o > loci_boot_BS20.treefile
nw_ed loci_boot.treefile 'i & b<=15' o > loci_boot_BS15.treefile
nw_ed loci_boot.treefile 'i & b<=10' o > loci_boot_BS10.treefile
nw_ed loci_boot.treefile 'i & b<=5' o > loci_boot_BS5.treefile
nw_ed loci_boot.treefile 'i & b<=0' o > loci_boot_BS0.treefile

## Running ASTRAL for each contracted set of loci/gene trees. 

java -jar $HOME/tools/Astral/astral.5.15.4.jar -i loci_boot_BS75.treefile -o ASTRAL_loci_boot_BS75.treefile 2>loci_boot_BS75.treefile.log
java -jar $HOME/tools/Astral/astral.5.15.4.jar -i loci_boot_BS50.treefile -o ASTRAL_loci_boot_BS50.treefile 2>loci_boot_BS50.treefile.log
java -jar $HOME/tools/Astral/astral.5.15.4.jar -i loci_boot_BS33.treefile -o ASTRAL_loci_boot_BS33.treefile 2>loci_boot_BS33.treefile.log
java -jar $HOME/tools/Astral/astral.5.15.4.jar -i loci_boot_BS30.treefile -o ASTRAL_loci_boot_BS30.treefile 2>loci_boot_BS30.treefile.log
java -jar $HOME/tools/Astral/astral.5.15.4.jar -i loci_boot_BS25.treefile -o ASTRAL_loci_boot_BS25.treefile 2>loci_boot_BS25.treefile.log
java -jar $HOME/tools/Astral/astral.5.15.4.jar -i loci_boot_BS20.treefile -o ASTRAL_loci_boot_BS20.treefile 2>loci_boot_BS20.treefile.log
java -jar $HOME/tools/Astral/astral.5.15.4.jar -i loci_boot_BS15.treefile -o ASTRAL_loci_boot_BS15.treefile 2>loci_boot_BS15.treefile.log
java -jar $HOME/tools/Astral/astral.5.15.4.jar -i loci_boot_BS10.treefile -o ASTRAL_loci_boot_BS10.treefile 2>loci_boot_BS10.treefile.log
java -jar $HOME/tools/Astral/astral.5.15.4.jar -i loci_boot_BS5.treefile -o ASTRAL_loci_boot_BS5.treefile 2>loci_boot_BS5.treefile.log
java -jar $HOME/tools/Astral/astral.5.15.4.jar -i loci_boot_BS0.treefile -o ASTRAL_loci_boot_BS0.treefile 2>loci_boot_BS0.treefile.log

## Visually assess changes to tree topology using software such as Figtree or iTOL. 
