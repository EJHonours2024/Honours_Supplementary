#######################
##### DE Analysis #####
#######################

R-4.3.1/bin/R #Run R

setwd("/home/darren/Emma_Honours/ancestral_de/de_analysis/") #Set working directory (example shown). 

count <- read.table("read_counts", sep="\t", stringsAsFactors=FALSE,  header=TRUE, row.names=1) #Read in read count data. 
count2 <- mydata[,-c(1,2,3,4,5,6,7,14,15,16,25,26,36,37,48,49)] #Select only the columns of interest depending on your contrast (i.e., only labellum samples). 

cluster <- read.table("vsearch_clust_c0.75.txt", sep="\t", stringsAsFactors=FALSE,  header=TRUE, row.names=2) 
count2$cluster <- cluster[match(row.names(count2), row.names(cluster)),"cluster"] #Match Evigene accessions to VSEARCH cluster assignment. 

#Stop here and check that matching is correct and corresponds to original files. 

write.table(count2, file = "counts_geneID_cluster.txt",sep="\t") #Write dataframe to a new file. 

prep <- read.table("counts_geneID_cluster.txt", sep="\t", stringsAsFactors=FALSE,  header=TRUE, row.names=1)

test <- aggregate(. ~ cluster, prep, FUN=sum) #Aggregate single, best mapped counts to cluster level. 
row.names(test) <- test$cluster #Assign cluster column as rownames. 
matrix2 <- test[,-c(1)] #Remove cluster column and assign to new dataframe. 
write.table(matrix2, file = "aggregate_sum_cluster.txt", sep="\t", row.names=FALSE) #Write results to a new file. 

long <- read.table("read_counts", sep="\t", stringsAsFactors=FALSE,  header=TRUE, row.names=1)
clusterlong <- read.table("vsearch_clust_c0.75.txt", sep="\t", stringsAsFactors=FALSE,  header=TRUE, row.names=2) 

long$cluster <- clusterlong[match(row.names(long), row.names(clusterlong)),"cluster"] #Match Evigene to VSEARCH cluster assignment. 
new <- select(long, c(5,63)) #Select only length and cluster columns and assign to a new dataframe. 

clus_max <- aggregate(Length~cluster,new,function(x) x[which.max(abs(x))]) #Aggregate by longest cluster. 

test$Length <- clus_max[match(test$cluster, clus_max$cluster),"Length"] #Combine the two dataframes. 
write.table(test, file = "longest_cluster_length.txt", sep="\t", row.names=FALSE)

#Check here to make sure that the longest cluster length is actually correct (compare to the longest length from read counts combined with cluster table).

#FPKM normalisation
counts_longest <- read.table("longest_cluster_length.txt", sep="\t", stringsAsFactors=FALSE, header=TRUE)
rpkm_cluster <- rpkm(y, gene.length=counts_longest$Length)
write.table(rpkm_cluster, file = "edgeR_FPKM_cluster_.txt", sep="\t")

#DE using FPKM values
matrix2 <- read.table("edgeR_FPKM_cluster_.txt", sep="\t", stringsAsFactors=FALSE,  header=TRUE, row.names=1)

#Assign sample groupings - here I have used 'SD' for samples of sexually deceptive species, and 'FD' for samples of food deceptive species. 
group <- factor(c("SD","SD","SD","SD","SD","SD","SD","SD","SD","SD","SD","SD","SD","SD","SD","SD","SD","SD","SD","SD","FD","FD","FD","SD","SD","SD","SD","SD","SD","SD","FD","FD","FD","FD","FD","FD","FD","FD","FD","FD","FD","FD","FD","FD","FD","FD"))
y <- DGEList(counts=matrix2, group=group)
design <- model.matrix(~0+group, data=y$samples)

y <- calcNormFactors(y) #TMM normalisation
y <- estimateDisp(y,design)

plotMDS(y) #For preliminary exploration of data. Always visualise prior to DE analysis.

fit <- glmQLFit(y, design)

my.contrasts <- makeContrasts(FDVSSD = groupFD - groupSD, levels=design) #Specify the constrast. 

qlf_FDVSSD <- glmQLFTest(fit, contrast=my.contrasts[,"FDVSSD"])
FDVSSD_sig <- topTags(qlf_FDVSSD, n = Inf, adjust.method = "BH")
write.table(FDVSSD_sig, file = "edgeR_qlf_FPKM.txt", sep="\t")

testclus <- read.table("test_mapman_collapse.txt", quote = "", sep="\t", stringsAsFactors=FALSE, header=TRUE, fill=TRUE)
DE <- read.table("edgeR_qlf_FPKM.txt", sep="\t", stringsAsFactors=FALSE, header=TRUE)

#Stop here and check that the dataframes are the same size, otherwise merging will not proceed correctly. 

merge_df <- merge(testclus, DE, by = "cluster") #Merge transcript annotations with DE results. 
write.table(merge_df, file = "DE_using_FPKM.txt",sep="\t") #Check that merging is successful by comparing to original input files. 



